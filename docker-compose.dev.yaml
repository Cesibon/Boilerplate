version: "3.7"
services:
  # DB
  database:
    image: postgres:13.1
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "${POSTGRES_USER}" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      APP_DB_NAME: ${DB_NAME}
      APP_DB_USER: ${DB_USER}
      APP_DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./database/scripts:/docker-entrypoint-initdb.d
      - ./database/data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - backend

  # SERVER
  server:
    build:
      context: ./server
      dockerfile: dockerfile.dev
    links:
      - "database:db"
    environment:
      NODE_ENV: development
      PORT: 5000
      APP_SECRET: ${APP_SECRET}

      # DATABSE
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}

      # APP
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      
    ports:
      - '5000:5000'
    volumes:
      - ./server/src:/app/src
    depends_on: 
      - database
    networks:
      - backend
  
  # CLIENT
  client:
    build:
      context: ./client
      dockerfile: dockerfile.dev
    environment:
      NODE_ENV: development
      REACT_APP_TITLE: ISIS
      REACT_APP_API_ENDPOINT: ${SERVER_URL}/api/v1
      WDS_SOCKET_PORT: 0
    volumes:
      - ./client/src:/app/src
    ports:
      - 80:3000
    depends_on: 
      - server
networks: 
  backend: