
# FROM node:10.16.0-alpine

# # set our node environment, either development or production
# # defaults to production, compose overrides this to development on build and run
# ARG NODE_ENV=production
# ENV NODE_ENV $NODE_ENV

# ARG PORT=5000
# ENV PORT $PORT

# # Create app directory
# WORKDIR /app/server

# # Install app dependencies
# # A wildcard is used to ensure both package.json AND package-lock.json are copied
# # where available (npm@5+)
# COPY package*.json /app/server

# RUN npm install
# # If you are building your code for production
# # RUN npm ci --only=production

# # Bundle app source
# COPY ./ /app/server

# EXPOSE $PORT



# # if you want to use npm start instead, then use `docker run --init in production`
# # so that signals are passed properly. Note the code in index.js is needed to catch Docker signals
# # using node here is still more graceful stopping then npm with --init afaik
# # I still can't come up with a good production way to run with npm and graceful shutdown
# CMD [ "npm", "run", "start" ]

# Specify a base image
FROM node:14-alpine AS alpine

WORKDIR /app

# Install dependencies
COPY package.json .
RUN npm install --production
COPY . .


# check every 30s to ensure this service returns HTTP 200
HEALTHCHECK --interval=30s \
  CMD node ./healthcheck.js

# Default command
CMD ["npm", "start"]